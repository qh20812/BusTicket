@page
@model BusTicketSystem.Pages.Home.Schedule.IndexModel
@{
    Layout = "_Layout";
    ViewData["BodyClass"] = "schedule-page";
    ViewData["Title"]=@Model.Departure ?? "Lịch trình" + " - " + @Model.Destination;
}
<div class="container my-4">
    @Html.AntiForgeryToken() @* Giữ lại AntiForgeryToken nếu các modal vẫn cần POST form *@
    
    <div class="search-trip-panel">
        @await Component.InvokeAsync("SearchTripPanel",new{
            departure =Model.Departure,
            destination =Model.Destination,
            departureDate =Model.DepartureDate,
            returnDate=Model.ReturnDate,
            quantity=Model.Quantity,
            TripType=Model.TripType
        })
    </div>
@if (Model.IsSearching)
    {
        <h2 class="mt-4">Kết quả tìm kiếm (@Model.AvailableTrips.Count)</h2>
    }
    else
    {
        <h2 class="mt-4">Lịch trình hiện có (@Model.AvailableTrips.Count)</h2>
    }
    

    @if (Model.AvailableTrips.Any())
    {
        <div class="trip-results">
            @foreach (var trip in Model.AvailableTrips)
            {
                <div class="card mb-3 trip-item">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <h5 class="card-title">
                                    <a asp-page="/Home/Schedule/Details" asp-route-id="@trip.TripId" class="shedule--card-link" title="Xem chi tiết chuyến đi">@trip.RouteName</a>
                                </h5>
                                <p class="card-text"><small class="text-muted">Nhà xe: @(trip.CompanyName ?? "N/A")</small></p>
                            </div>
                            <div class="col-md-3">
                                <p class="card-text"><strong>Khởi hành:</strong> @trip.DepartureTime.ToString("dd/MM/yyyy HH:mm")</p>
                                <p class="card-text"><strong>Đến dự kiến:</strong> @trip.EstimatedArrivalTime.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                            <div class="col-md-2">
                                <p class="card-text"><strong>Thời gian:</strong> @trip.EstimatedDuration</p>
                                <p class="card-text"><strong>Khoảng cách:</strong> @trip.Distance KM</p>
                            </div>
                             <div class="col-md-2 text-end">
                                <h4 class="text-primary">@trip.Price.ToString("N0") VND</h4>
                                <p class="card-text"><small class="text-muted">Còn @trip.AvailableSeats ghế</small></p>
                            </div>
                            <div class="col-md-2 text-end d-flex flex-column">
                                <a asp-page="/Home/Schedule/Details" asp-route-id="@trip.TripId" class="btn btn-outline-primary btn-sm mb-2">
                                Xem chi tiết
                                </a>
                                <button class="btn btn-outline-success btn-sm book-trip-btn"
                                        data-trip-id="@trip.TripId"
                                        data-route-name="@trip.RouteName"
                                        data-departure-time="@trip.DepartureTime.ToString("dd/MM/yyyy HH:mm")"
                                        data-price="@trip.Price"
                                        data-quantity="@Model.Quantity"
                                        data-available-seats="@trip.AvailableSeats"
                                        data-bs-toggle="modal" data-bs-target="#bookingModal">
                                    Đặt vé
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info text-center" role="alert">
            Không tìm thấy chuyến đi nào phù hợp với yêu cầu của bạn.
        </div>
    }
</div>

<!-- Modals Đặt vé -->
<!-- Modal 1: Thông tin hành khách -->
<div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bookingModalLabel">Thông tin đặt vé</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Chuyến đi: <strong id="modalTripRouteName"></strong> - Khởi hành: <strong id="modalTripDepartureTime"></strong></p>
                <p>Số lượng vé: <strong id="modalBookingQuantity"></strong> - Giá mỗi vé: <strong id="modalTripPrice"></strong></p>
                <form id="passengerInfoForm">
                    <input type="hidden" id="modalTripId" name="TripId" />
                    <input type="hidden" id="modalQuantity" name="Quantity" />
                    <div class="mb-3">
                        <label for="guestPhone" class="form-label">Số điện thoại</label>
                        <input type="tel" class="form-control" id="guestPhone" name="GuestPhone" required>
                    </div>
                    @* Thêm các trường thông tin hành khách khác nếu cần *@
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="continueToSeatSelectionBtn">Tiếp tục chọn ghế</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal 2: Chọn ghế -->
<div class="modal fade" id="seatSelectionModal" tabindex="-1" aria-labelledby="seatSelectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="seatSelectionModalLabel">Chọn ghế</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                 <p>Chuyến đi: <strong id="seatModalTripRouteName"></strong> - Khởi hành: <strong id="seatModalTripDepartureTime"></strong></p>
                 <p>Số lượng cần chọn: <strong id="seatModalQuantity"></strong> - Đã chọn: <span id="selectedSeatCount">0</span></p>
                 <div id="seatMapContainer" class="border p-3 rounded" style="min-height: 200px; position: relative;">
                     <!-- Sơ đồ ghế sẽ được JS hiển thị ở đây -->
                     <div id="loadingSeatMap" class="position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-light bg-opacity-75" style="z-index: 10;">
                         Đang tải sơ đồ ghế...
                     </div>
                 </div>
                 <div class="mt-3">
                     <strong>Ghế đã chọn:</strong> <span id="selectedSeatsDisplay"></span>
                 </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success" id="confirmBookingBtn" disabled>Xác nhận đặt vé</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Script cho tripTypeRadios, departureDateLabel, returnDateGroup, returnDateInput đã được xử lý ở _Layout.cshtml
            // Chỉ giữ lại script cho các modal và logic đặt vé
            const bookingModal = new bootstrap.Modal(document.getElementById('bookingModal'));
            const seatSelectionModal = new bootstrap.Modal(document.getElementById('seatSelectionModal'));
            const passengerInfoForm = document.getElementById('passengerInfoForm');
            const seatMapContainer = document.getElementById('seatMapContainer');
            const loadingSeatMap = document.getElementById('loadingSeatMap');
            const confirmBookingBtn = document.getElementById('confirmBookingBtn');
            const selectedSeatsDisplay = document.getElementById('selectedSeatsDisplay');
            const selectedSeatCountSpan = document.getElementById('selectedSeatCount');

            let currentTripId = null;
            let requiredQuantity = 0; 
            let selectedSeats = []; 
            let busCapacity = 0; 
            let bookedSeats = []; 
            document.querySelectorAll('.book-trip-btn').forEach(button => {
                button.addEventListener('click', function () {
                    currentTripId = this.dataset.tripId;
                    requiredQuantity = parseInt(this.dataset.quantity);
                    const routeName = this.dataset.routeName;
                    const departureTime = this.dataset.departureTime;
                    const price = this.dataset.price;

                    document.getElementById('modalTripId').value = currentTripId;
                    document.getElementById('modalQuantity').value = requiredQuantity;
                    document.getElementById('modalTripRouteName').textContent = routeName;
                    document.getElementById('modalTripDepartureTime').textContent = departureTime;
                    document.getElementById('modalBookingQuantity').textContent = requiredQuantity;
                    document.getElementById('modalTripPrice').textContent = parseFloat(price).toLocaleString('vi-VN') + ' VND'; // Định dạng giá

                    selectedSeats = [];
                    updateSeatSelectionDisplay();
                    confirmBookingBtn.disabled = true;
                });
            });
            document.getElementById('continueToSeatSelectionBtn').addEventListener('click', async function () {
                if (!passengerInfoForm.checkValidity()) {
                    passengerInfoForm.reportValidity();
                    return;
                }

                bookingModal.hide();
                seatSelectionModal.show();
                document.getElementById('seatModalTripRouteName').textContent = document.getElementById('modalTripRouteName').textContent;
                document.getElementById('seatModalTripDepartureTime').textContent = document.getElementById('modalTripDepartureTime').textContent;
                document.getElementById('seatModalQuantity').textContent = requiredQuantity;

                // Lấy và hiển thị sơ đồ ghế
                await fetchSeatMap(currentTripId);
            });

            // Lấy dữ liệu ghế và hiển thị sơ đồ
            async function fetchSeatMap(tripId) {
                seatMapContainer.innerHTML = ''; // Xóa sơ đồ cũ
                loadingSeatMap.style.display = 'flex'; // Hiển thị chỉ báo đang tải

                try {
                    const response = await fetch(`/Home/Schedule/Index?handler=SeatData&tripId=${tripId}`);
                    if (!response.ok) {
                        const error = await response.text();
                        seatMapContainer.innerHTML = `<p class="text-danger text-center">Lỗi tải sơ đồ ghế: ${error}</p>`;
                        console.error("Không thể lấy dữ liệu ghế:", response.status, error);
                        return;
                    }
                    const data = await response.json();
                    busCapacity = data.capacity;
                    bookedSeats = data.bookedSeats;
                    renderSeatMap(busCapacity, bookedSeats);
                } catch (error) {
                    seatMapContainer.innerHTML = `<p class="text-danger text-center">Lỗi xử lý sơ đồ ghế: ${error.message}</p>`;
                    console.error("Lỗi khi lấy dữ liệu ghế:", error);
                } finally {
                    loadingSeatMap.style.display = 'none'; // Ẩn chỉ báo đang tải
                }
            }

            // Hiển thị sơ đồ ghế
            function renderSeatMap(capacity, booked) {
                seatMapContainer.innerHTML = ''; // Xóa sơ đồ cũ
                seatMapContainer.style.position = 'relative'; // Đảm bảo position được đặt cho div loading tuyệt đối

                const seatGrid = document.createElement('div');
                seatGrid.style.display = 'grid';
                seatGrid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(50px, 1fr))'; // Lưới đáp ứng
                seatGrid.style.gap = '10px';
                seatGrid.style.maxWidth = '400px'; // Giới hạn chiều rộng cho hình dạng xe buýt
                seatGrid.style.margin = 'auto'; // Căn giữa lưới

                // Đánh số ghế đơn giản (A1, A2, B1, B2, v.v. hoặc chỉ 1, 2, 3...)
                // Sử dụng số đơn giản cho ví dụ này, sắp xếp theo hàng/cột
                const seatsPerRow = 4; // Ví dụ: 2 ghế, lối đi, 2 ghế
                const totalRows = Math.ceil(capacity / seatsPerRow);

                for (let i = 1; i <= capacity; i++) {
                    const seatNumber = i.toString().padStart(2, '0'); // Đánh số đơn giản 01, 02...
                    // Hoặc sử dụng logic A01, A02, B01, B02... dựa trên hàng/cột
                    // const row = Math.ceil(i / seatsPerRow);
                    // const col = i % seatsPerRow === 0 ? seatsPerRow : i % seatsPerRow;
                    // const seatNumber = `${String.fromCharCode(64 + row)}${col.toString().padStart(2, '0')}`; // A01, A02, B01... (điều chỉnh logic cho lối đi)

                    const seatElement = document.createElement('div');
                    seatElement.classList.add('seat');
                    seatElement.textContent = seatNumber;
                    seatElement.dataset.seatNumber = seatNumber;
                    seatElement.style.width = '50px';
                    seatElement.style.height = '50px';
                    seatElement.style.borderRadius = '8px';
                    seatElement.style.border = '1px solid #ccc';
                    seatElement.style.display = 'flex';
                    seatElement.style.justifyContent = 'center';
                    seatElement.style.alignItems = 'center';
                    seatElement.style.cursor = 'pointer';
                    seatElement.style.fontWeight = 'bold';

                    if (booked.includes(seatNumber)) {
                        seatElement.classList.add('booked'); // Ghế đã đặt
                        seatElement.style.backgroundColor = '#dc3545'; // Màu đỏ
                        seatElement.style.color = '#fff';
                        seatElement.style.cursor = 'not-allowed'; // Không cho phép nhấp
                    } else {
                        seatElement.classList.add('available'); // Ghế trống
                        seatElement.style.backgroundColor = '#fff'; // Màu trắng
                        seatElement.style.color = '#333';
                        seatElement.addEventListener('click', handleSeatClick);
                    }
                    seatGrid.appendChild(seatElement);
                }
                 seatMapContainer.appendChild(seatGrid);

                 // Tùy chọn: Thêm đường viền đơn giản cho xe buýt (chỉ mang tính trực quan)
                 seatMapContainer.style.border = '2px solid #007bff';
                 seatMapContainer.style.padding = '20px';
                 seatMapContainer.style.borderRadius = '15px';
                 seatMapContainer.style.backgroundColor = '#f8f9fa';
            }

            // Xử lý sự kiện nhấp vào ghế để chọn
            function handleSeatClick() {
                const seatNumber = this.dataset.seatNumber;
                const index = selectedSeats.indexOf(seatNumber);

                if (index > -1) {
                    // Bỏ chọn ghế
                    selectedSeats.splice(index, 1);
                    this.style.backgroundColor = '#fff'; // Màu trắng
                    this.classList.remove('selected');
                } else {
                    // Chọn ghế, nếu chưa đạt giới hạn số lượng
                    if (selectedSeats.length < requiredQuantity) {
                        selectedSeats.push(seatNumber);
                        this.style.backgroundColor = '#28a745'; // Màu xanh lá
                        this.style.color = '#fff';
                        this.classList.add('selected');
                    } else {
                        alert(`Bạn chỉ có thể chọn tối đa ${requiredQuantity} ghế.`);
                    }
                }
                updateSeatSelectionDisplay();
            }

            // Cập nhật hiển thị các ghế đã chọn và bật/tắt nút xác nhận
            function updateSeatSelectionDisplay() {
                selectedSeatsDisplay.textContent = selectedSeats.length > 0 ? selectedSeats.join(', ') : 'Chưa chọn ghế nào';
                selectedSeatCountSpan.textContent = selectedSeats.length;
                confirmBookingBtn.disabled = selectedSeats.length !== requiredQuantity;
            }

            // Xử lý sự kiện nhấp nút "Xác nhận đặt vé"
            confirmBookingBtn.addEventListener('click', async function () {
                if (selectedSeats.length !== requiredQuantity) {
                    alert(`Vui lòng chọn đúng ${requiredQuantity} ghế.`);
                    return;
                }

                const guestPhone = document.getElementById('guestPhone').value;

                const bookingData = {
                    tripId: currentTripId,
                    selectedSeats: selectedSeats,
                    quantity: requiredQuantity,
                    guestPhone: guestPhone
                };

                // Vô hiệu hóa nút và hiển thị chỉ báo đang tải nếu muốn
                confirmBookingBtn.disabled = true;
                confirmBookingBtn.textContent = 'Đang xử lý...';

                try {
                    const response = await fetch('/Home/Schedule/Index?handler=Book', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value // Bao gồm anti-forgery token
                        },
                        body: JSON.stringify(bookingData)
                    });

                    const result = await response.json();

                    if (response.ok && result.success) { // Kiểm tra thêm result.success
                        // Đặt vé thành công, chuyển hướng đến trang hóa đơn
                        window.location.href = `/ForCustomer/TicketInvoice/Index?orderId=${result.orderId}`;
                    } else {
                        // Xử lý lỗi (ví dụ: ghế đã được đặt)
                        let errorMessage = "Đặt vé thất bại.";
                        if (result && result.message) {
                            errorMessage = result.message;
                            if (result.errors) errorMessage += "\n- " + result.errors.join("\n- ");
                        }
                        alert(errorMessage);
                        console.error("Đặt vé thất bại:", result);
                        // Tải lại sơ đồ ghế để hiển thị các ghế mới được đặt
                        await fetchSeatMap(currentTripId);
                    }
                } catch (error) {
                    alert(`Đã xảy ra lỗi trong quá trình đặt vé: ${error.message}`);
                    console.error("Lỗi trong quá trình đặt vé:", error);
                } finally {
                    confirmBookingBtn.disabled = false;
                    confirmBookingBtn.textContent = 'Xác nhận đặt vé';
                }
            });

             // Thêm anti-forgery token vào trang cho AJAX POST (nếu sử dụng jQuery)
             // const antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();
             // $.ajaxSetup({
             //     headers: {
             //         'RequestVerificationToken': antiForgeryToken
             //     }
             // });
        });
    </script>
    <partial name="_ValidationScriptsPartial" />
}