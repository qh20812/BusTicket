@page
@model BusTicketSystem.Pages.Home.Schedule.IndexModel
@{
    Layout = "_Layout";
    ViewData["BodyClass"] = "schedule-page";
    ViewData["Title"] = Model.Departure ?? "Lịch trình" + " - " + Model.Destination;
}
<div class="container" style="padding-top: 15px;">
    @Html.AntiForgeryToken()
    
    <div class="search-trip-panel">
        @await Component.InvokeAsync("SearchTripPanel", new {
            departure = Model.Departure,
            destination = Model.Destination,
            departureDate = Model.DepartureDate,
            returnDate = Model.ReturnDate,
            quantity = Model.Quantity,
            TripType = Model.TripType
        })
    </div>
    <h1 class="schedule-title">Lịch trình chuyến đi</h1>
    @if (Model.AvailableTrips.Any())
    {
        <!-- Header row for trip info columns -->
        <div class="trip-list-header row align-items-center mb-2 mx-auto px-2 py-2 shadow-sm">
            <div class="col-md-3">Tuyến xe</div>
            <div class="col-md-3">Khởi hành</div>
            <div class="col-md-2">Khoảng cách</div>
            <div class="col-md-2 text-end">Giá vé</div>
            <div class="col-md-2 text-end">Thao tác</div>
        </div>
        <div class="trip-results">
            @foreach (var trip in Model.AvailableTrips)
            {
                <div class="card mb-3 trip-item">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <h5 class="schedule-card-title mb-1">
                                    <a asp-page="/Home/Schedule/Details" asp-route-id="@trip.TripId" class="shedule--card-link" title="Xem chi tiết chuyến đi">@trip.RouteName</a>
                                </h5>
                                <p class="card-text mb-0"><small class="text-muted">Nhà xe: @(trip.CompanyName ?? "N/A")</small></p>
                            </div>
                            <div class="col-md-3">
                                <p class="schedule-text-card mb-0">@trip.DepartureTime.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                            <div class="col-md-2">
                                <p class="card-text mb-0">@trip.Distance KM</p>
                            </div>
                            <div class="col-md-2 text-end">
                                <h4 class="text-primary mb-0">@trip.Price.ToString("N0") VND</h4>
                                <p class="card-text mb-0"><small class="text-muted">Còn @trip.AvailableSeats ghế</small></p>
                            </div>
                            <div class="col-md-2 text-end d-flex flex-column">
                                <a asp-page="/Home/Schedule/Details" asp-route-id="@trip.TripId" class="btn btn-outline-primary btn-sm mb-2">
                                    Xem chi tiết
                                </a>
                                <button class="btn btn-outline-success btn-sm book-trip-btn"
                                        data-trip-id="@trip.TripId"
                                        data-route-name="@trip.RouteName"
                                        data-departure-time="@trip.DepartureTime.ToString("dd/MM/yyyy HH:mm")"
                                        data-price="@trip.Price"
                                        data-quantity="@Model.Quantity"
                                        data-available-seats="@trip.AvailableSeats"
                                        data-bs-toggle="modal" data-bs-target="#bookingModal">
                                    Đặt vé
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info text-center" role="alert">
            Không tìm thấy chuyến đi nào phù hợp với yêu cầu của bạn.
        </div>
    }
</div>

<!-- Modal 1: Thông tin hành khách -->
<div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bookingModalLabel">Thông tin đặt vé</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Chuyến đi: <strong id="modalTripRouteName"></strong> - Khởi hành: <strong id="modalTripDepartureTime"></strong></p>
                <p>Số lượng vé: <strong id="modalBookingQuantity"></strong> - Giá mỗi vé: <strong id="modalTripPrice"></strong></p>
                <form id="passengerInfoForm">
                    <input type="hidden" id="modalTripId" name="TripId" />
                    <input type="hidden" id="modalQuantity" name="Quantity" />
                    <div class="mb-3">
                        <label for="guestPhone" class="form-label">Số điện thoại <span class="text-danger">*</span></label>
                        <input type="tel" class="form-control input-phone" id="guestPhone" name="guestPhone" placeholder="Nhập số điện thoại" required maxlength="15" autocomplete="tel" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label d-block mb-2">Loại vé <span class="text-danger">*</span></label>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="tripType" id="oneWayRadio" value="one-way" checked>
                            <label class="form-check-label" for="oneWayRadio">Một chiều</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="tripType" id="roundTripRadio" value="round-trip">
                            <label class="form-check-label" for="roundTripRadio">Khứ hồi</label>
                        </div>
                    </div>
                    <div class="mb-3" id="returnDateGroup" style="display:none;">
                        <label for="returnDateInput" class="form-label">Ngày về <span class="text-danger">*</span></label>
                        <input type="date" class="form-control date-input" id="returnDateInput" name="returnDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="continueToSeatSelectionBtn">Tiếp tục chọn ghế</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal 2: Chọn ghế -->
<div class="modal fade" id="seatSelectionModal" tabindex="-1" aria-labelledby="seatSelectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="seatSelectionModalLabel">Chọn ghế</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Chuyến đi: <strong id="seatModalTripRouteName"></strong> - Khởi hành: <strong id="seatModalTripDepartureTime"></strong></p>
                <p>Số lượng cần chọn: <strong id="seatModalQuantity"></strong> - Đã chọn: <span id="selectedSeatCount">0</span></p>
                <div id="seatMapContainer" class="seat-map-container-style">
                    <div id="loadingSeatMap" class="position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-light bg-opacity-75" style="z-index: 10;">
                        Đang tải sơ đồ ghế...
                    </div>
                </div>
                <div class="mt-3">
                    <strong>Ghế đã chọn:</strong> <span id="selectedSeatsDisplay"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success" id="confirmBookingBtn" disabled>Xác nhận đặt vé</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        document.addEventListener('DOMContentLoaded', function () {
            const bookingModal = new bootstrap.Modal(document.getElementById('bookingModal'));
            const seatSelectionModal = new bootstrap.Modal(document.getElementById('seatSelectionModal'));
            const passengerInfoForm = document.getElementById('passengerInfoForm');
            const seatMapContainer = document.getElementById('seatMapContainer');
            const loadingSeatMap = document.getElementById('loadingSeatMap');
            const confirmBookingBtn = document.getElementById('confirmBookingBtn');
            const selectedSeatsDisplay = document.getElementById('selectedSeatsDisplay');
            const selectedSeatCountSpan = document.getElementById('selectedSeatCount');

            // --- Bổ sung biến cho đồng bộ loại vé/ngày về ---
            const oneWayRadio = document.getElementById('oneWayRadio');
            const roundTripRadio = document.getElementById('roundTripRadio');
            const returnDateGroup = document.getElementById('returnDateGroup');
            const returnDateInput = document.getElementById('returnDateInput');

            // Lấy giá trị TripType và returnDate từ form tìm vé (nếu có)
            let initialTripType = '@(Model.TripType ?? "one-way")';
            let initialReturnDate = '@(Model.ReturnDate?.ToString("yyyy-MM-dd") ?? "")';

            // Khi mở modal đặt vé, đồng bộ loại vé/ngày về từ form tìm vé
            document.querySelectorAll('.book-trip-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    currentTripId = this.dataset.tripId;
                    requiredQuantity = parseInt(this.dataset.quantity);
                    const routeName = this.dataset.routeName;
                    const departureTime = this.dataset.departureTime;
                    const price = this.dataset.price;

                    document.getElementById('modalTripId').value = currentTripId;
                    document.getElementById('modalQuantity').value = requiredQuantity;
                    document.getElementById('modalTripRouteName').textContent = routeName;
                    document.getElementById('modalTripDepartureTime').textContent = departureTime;
                    document.getElementById('modalBookingQuantity').textContent = requiredQuantity;
                    document.getElementById('modalTripPrice').textContent = parseFloat(price).toLocaleString('vi-VN') + ' VND';

                    selectedSeats = [];
                    updateSeatSelectionDisplay();
                    confirmBookingBtn.disabled = true;

                    // --- Đồng bộ loại vé và ngày về khi mở modal ---
                    if (initialTripType === 'round-trip') {
                        roundTripRadio.checked = true;
                        returnDateGroup.style.display = '';
                        if (initialReturnDate) {
                            returnDateInput.value = initialReturnDate;
                        }
                    } else {
                        oneWayRadio.checked = true;
                        returnDateGroup.style.display = 'none';
                        returnDateInput.value = '';
                    }

                    bookingModal.show();
                });
            });

            // Hiển thị/ẩn input ngày về khi chọn loại vé
            oneWayRadio.addEventListener('change', function () {
                if (this.checked) {
                    returnDateGroup.style.display = 'none';
                    returnDateInput.value = '';
                }
            });
            roundTripRadio.addEventListener('change', function () {
                if (this.checked) {
                    returnDateGroup.style.display = '';
                }
            });

            document.getElementById('continueToSeatSelectionBtn').addEventListener('click', async function () {
                // Kiểm tra hợp lệ số điện thoại, loại vé, ngày về nếu là khứ hồi
                if (!passengerInfoForm.checkValidity()) {
                    passengerInfoForm.reportValidity();
                    return;
                }
                // Nếu chọn khứ hồi mà chưa nhập ngày về thì báo lỗi
                if (roundTripRadio.checked && !returnDateInput.value) {
                    returnDateInput.classList.add('is-invalid');
                    returnDateInput.focus();
                    return;
                } else {
                    returnDateInput.classList.remove('is-invalid');
                }

                bookingModal.hide();
                seatSelectionModal.show();
                document.getElementById('seatModalTripRouteName').textContent = document.getElementById('modalTripRouteName').textContent;
                document.getElementById('seatModalTripDepartureTime').textContent = document.getElementById('modalTripDepartureTime').textContent;
                document.getElementById('seatModalQuantity').textContent = requiredQuantity;

                await fetchSeatMap(currentTripId);
            });

            async function fetchSeatMap(tripId) {
                seatMapContainer.innerHTML = '';
                loadingSeatMap.style.display = 'flex';

                try {
                    const response = await fetch(`/Home/Schedule/Index?handler=SeatData&tripId=${tripId}`);
                    if (!response.ok) {
                        const error = await response.text();
                        seatMapContainer.innerHTML = `<p class="text-danger text-center">Lỗi tải sơ đồ ghế: ${error}</p>`;
                        console.error("Không thể lấy dữ liệu ghế:", response.status, error);
                        return;
                    }
                    const data = await response.json();
                    busCapacity = data.capacity;
                    // Defensive: always ensure bookedSeats is an array of seat numbers (strings)
                    let bookedSeats = [];
                    if (Array.isArray(data.bookedSeats)) {
                        bookedSeats = data.bookedSeats.map(s => s.toString());
                    } else if (typeof data.bookedSeats === 'string' && data.bookedSeats.trim() !== '') {
                        bookedSeats = data.bookedSeats.split(',').map(s => s.trim()).filter(Boolean);
                    } // else keep as []
                    busType = data.busType;
                    isTwoStory = data.isTwoStory;
                    renderSeatMap(busCapacity, bookedSeats, busType, isTwoStory);
                } catch (error) {
                    seatMapContainer.innerHTML = `<p class="text-danger text-center">Lỗi xử lý sơ đồ ghế: ${error.message}</p>`;
                    console.error("Lỗi khi lấy dữ liệu ghế:", error);
                } finally {
                    loadingSeatMap.style.display = 'none';
                }
            }

            function renderSeatMap(capacity, booked, busType, isTwoStory) {
                seatMapContainer.innerHTML = '';
                // Defensive: ensure booked is always an array
                if (!Array.isArray(booked)) booked = [];
                const busLayout = document.createElement('div');
                busLayout.classList.add('bus-layout');

                const isSleeper = busType && busType.includes('Giường nằm');
                const seatsPerRow = isSleeper ? 5 : 4; // 2-1-2 for sleeper, 2-2 for seated
                const rowsPerLevel = Math.ceil(capacity / (isTwoStory ? 2 * seatsPerRow : seatsPerRow));

                if (isTwoStory) {
                    const firstLevel = document.createElement('div');
                    firstLevel.classList.add('bus-level');
                    const secondLevel = document.createElement('div');
                    secondLevel.classList.add('bus-level');

                    const firstLevelCapacity = Math.ceil(capacity / 2);
                    const secondLevelCapacity = capacity - firstLevelCapacity;

                    createSeats(firstLevel, 1, firstLevelCapacity, booked, isSleeper, true);
                    createSeats(secondLevel, firstLevelCapacity + 1, secondLevelCapacity, booked, isSleeper, false);

                    busLayout.appendChild(firstLevel);
                    busLayout.appendChild(secondLevel);
                } else {
                    createSeats(busLayout, 1, capacity, booked, isSleeper, true);
                }

                seatMapContainer.appendChild(busLayout);
            }

            function createSeats(container, startNumber, seatCount, booked, isSleeper, isLowerLevel) {
                const seatsPerRow = isSleeper ? 5 : 4;
                const rows = Math.ceil(seatCount / seatsPerRow);
                const seatGrid = document.createElement('div');
                seatGrid.classList.add('seat-grid');

                // Defensive: ensure booked is always an array of strings
                let bookedArr = [];
                if (Array.isArray(booked)) {
                    bookedArr = booked.map(s => s.toString());
                } else if (typeof booked === 'string' && booked.trim() !== '') {
                    bookedArr = booked.split(',').map(s => s.trim()).filter(Boolean);
                }

                if (isLowerLevel) {
                    const steeringWheel = document.createElement('div');
                    steeringWheel.classList.add('steering-wheel');
                    steeringWheel.innerHTML = '<i class="bi bi-record-circle"></i>';
                    container.appendChild(steeringWheel);
                }

                for (let i = 0; i < rows; i++) {
                    const row = document.createElement('div');
                    row.classList.add('seat-row');

                    for (let j = 0; j < seatsPerRow; j++) {
                        const seatIndex = i * seatsPerRow + j + startNumber;
                        if (seatIndex > startNumber + seatCount - 1) break;

                        const seatNumber = seatIndex.toString().padStart(2, '0');
                        const seatElement = document.createElement('div');
                        seatElement.classList.add('seat', isSleeper ? 'bed' : 'chair');
                        seatElement.textContent = seatNumber;
                        seatElement.dataset.seatNumber = seatNumber;

                        if (bookedArr.includes(seatNumber)) {
                            seatElement.classList.add('booked');
                        } else {
                            seatElement.classList.add('available');
                            seatElement.addEventListener('click', handleSeatClick);
                        }

                        if (isSleeper && j === 2) {
                            const aisle = document.createElement('div');
                            aisle.classList.add('aisle');
                            row.appendChild(aisle);
                        } else if (!isSleeper && j === 2) {
                            const aisle = document.createElement('div');
                            aisle.classList.add('aisle');
                            row.appendChild(aisle);
                        }

                        row.appendChild(seatElement);
                    }
                    seatGrid.appendChild(row);
                }
                container.appendChild(seatGrid);
            }

            function handleSeatClick() {
                const seatNumber = this.dataset.seatNumber;
    const index = selectedSeats.indexOf(seatNumber);

    if (index > -1) {
        selectedSeats.splice(index, 1);
        this.classList.remove('selected');
        // Khôi phục style của trạng thái available
        this.style.backgroundColor = '#fff';
        this.style.color = '#333';
    } else {
        if (selectedSeats.length < requiredQuantity) {
            selectedSeats.push(seatNumber);
            this.classList.add('selected');
            this.style.backgroundColor = '#28a745';
            this.style.color = '#fff';
        } else {
            alert(`Bạn chỉ có thể chọn tối đa ${requiredQuantity} ghế.`);
        }
    }
    updateSeatSelectionDisplay();
            }

            function updateSeatSelectionDisplay() {
                selectedSeatsDisplay.textContent = selectedSeats.length > 0 ? selectedSeats.join(', ') : 'Chưa chọn ghế nào';
                selectedSeatCountSpan.textContent = selectedSeats.length;
                confirmBookingBtn.disabled = selectedSeats.length !== requiredQuantity;
            }

            confirmBookingBtn.addEventListener('click', async function () {
                if (selectedSeats.length !== requiredQuantity) {
                    alert(`Vui lòng chọn đúng ${requiredQuantity} ghế.`);
                    return;
                }
                const guestPhone = document.getElementById('guestPhone').value;
                // Lấy loại vé và ngày về từ modal
                const tripType = oneWayRadio.checked ? 'one-way' : 'round-trip';
                const returnDate = returnDateInput.value;
                const bookingData = {
                    tripId: currentTripId,
                    selectedSeats: selectedSeats,
                    quantity: requiredQuantity,
                    guestPhone: guestPhone,
                    tripType: tripType,
                    returnDate: returnDate
                };

                confirmBookingBtn.disabled = true;
                confirmBookingBtn.textContent = 'Đang xử lý...';

                try {
                    const response = await fetch('/Home/Schedule/Index?handler=Book', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(bookingData)
                    });

                    const result = await response.json();

                    if (response.ok && result.success) {
                        window.location.href = `/ForCustomer/TicketInvoice/Index?orderId=${result.orderId}`;
                    } else {
                        let errorMessage = "Đặt vé thất bại.";
                        if (result && result.message) {
                            errorMessage = result.message;
                            if (result.errors) errorMessage += "\n- " + result.errors.join("\n- ");
                        }
                        alert(errorMessage);
                        await fetchSeatMap(currentTripId);
                    }
                } catch (error) {
                    alert(`Đã xảy ra lỗi trong quá trình đặt vé: ${error.message}`);
                    console.error("Lỗi trong quá trình đặt vé:", error);
                } finally {
                    confirmBookingBtn.disabled = false;
                    confirmBookingBtn.textContent = 'Xác nhận đặt vé';
                }
            });
        });
    </script>
    <partial name="_ValidationScriptsPartial" />
}