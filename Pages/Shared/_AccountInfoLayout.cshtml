@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    var username = HttpContextAccessor.HttpContext?.Session.GetString("Username") ?? "Khách";
    var currentPath = HttpContextAccessor.HttpContext?.Request.Path.Value?.ToLower() ?? "";
    var avatarPath = HttpContextAccessor.HttpContext?.Session.GetString("AvatarPath") ?? "/images/logo2.png";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] | Tài khoản</title>
    <link rel="stylesheet" href="~/css/_adminlayout.css"> @* Bạn cần tạo file này dựa trên _adminlayout.css *@
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="icon" href="/images/logo5.png" type="image/png"/>
</head>
<body>
    <div class="sidebar">
        <a href="/Index" class="logo" style="text-decoration: none;">
            <img class="logo_dashboard" src="/images/LogoAndSlogan2.png" alt="Trang chủ">
        </a>
        <ul class="side-menu">
            <li class="@(currentPath.StartsWith("/forcustomer/myaccount") ? "active" : "")"><a href="/ForCustomer/MyAccount/Index"><i class='bx bx-user-circle'></i>Thông tin cá nhân</a></li>
            <li class="@(currentPath.StartsWith("/forcustomer/myorders") ? "active" : "")"><a href="/ForCustomer/MyOrders/Index"><i class='bx bx-receipt'></i>Đơn hàng của tôi</a></li>
            @* <li class="@(currentPath.StartsWith("/forcustomer/myreviews") ? "active" : "")"><a href="#"><i class='bx bx-comment-edit'></i>Nhận xét chuyến đi</a></li> *@
        </ul>
        <ul class="side-menu">
            <li>
                <a asp-page="/Index" style="text-decoration: none;" title="Trang chủ">
                    <i class='bx bx-home'></i> Về Trang chủ
                </a>
            </li>
        </ul>
    </div>
    <div class="content">
        <nav>
            <i class='bx bx-menu'></i>
            <form method="get" asp-page="/ForCustomer/SearchHandler/Index">
                <div class="form-input">
                    
                </div>
            </form>
            <div id="darkmode-toggle-container" style="display: flex; align-items: center; gap: 4px; margin-right:8px;">
                <span id="icon-sun" style="font-size: 1.3rem; color: #FFD600; display: none;"><i class="bi bi-sun-fill"></i></span>
                <input type="checkbox" id="theme-toggle" hidden>
                <label for="theme-toggle" class="theme-toggle" title="Dark/Light Mode" style="margin:0; padding:0; background: #e3f2fd; border-radius: 50px; width: 44px; height: 26px; display: flex; align-items: center; justify-content: center; position: relative; cursor: pointer; transition: background 0.2s;">
                    <span id="toggle-knob" style="display: block; width: 20px; height: 20px; background: #fff; border-radius: 50%; box-shadow: 0 1px 4px rgba(0,0,0,0.10); position: absolute; left: 3px; transition: left 0.2s;"></span>
                </label>
                <span id="icon-moon" style="font-size: 1.3rem; color: #1976D2; display: none;"><i class="bi bi-moon-stars-fill"></i></span>
            </div>
            <a href="/ForCustomer/Notifications/Index" class="notif">
                @* <i class='bx bx-bell'></i> *@
                @* <span>@await Component.InvokeAsync("UnreadNotificationCount")</span> *@
            </a>
            <a href="/ForAdmin/ProfileAdmin" class="profile" title="Thông tin cá nhân">
            </a>
            
            <a href="/Account/Logout/Index" class="logout"  style='text-decoration: none; color: red;' title="Đăng xuất">
                    <i class='bx bx-log-out-circle'></i>
            </a>
        </nav>
        <main>
            @RenderBody()
        </main>
    </div>
    <script>
        const sideLinks = document.querySelectorAll('.sidebar .side-menu li a:not(.logout)');
        sideLinks.forEach(item => {
            const li = item.parentElement;
            item.addEventListener('click', () => {
                sideLinks.forEach(i => {
                    i.parentElement.classList.remove('active');
                })
                // Active class is set by server-side logic based on currentPath
            });
        });

        const menuBar = document.querySelector('.content nav .bx.bx-menu');
        const sideBar = document.querySelector('.sidebar');

        menuBar.addEventListener('click', () => {
            sideBar.classList.toggle('close');
        });

        window.addEventListener('resize', () => {
            if (window.innerWidth < 768) {
                sideBar.classList.add('close');
            } else {
                sideBar.classList.remove('close');
            }
        });

        // Dark mode toggle logic with icon
        const toggler = document.getElementById('theme-toggle');
        const body = document.body;
        const sun = document.getElementById('icon-sun');
        const moon = document.getElementById('icon-moon');
        const knob = document.getElementById('toggle-knob');
        function setDarkModeUI(isDark) {
            if (isDark) {
                body.classList.add('dark');
                toggler.checked = true;
                sun.style.display = 'none';
                moon.style.display = 'inline';
                knob.style.left = '21px';
            } else {
                body.classList.remove('dark');
                toggler.checked = false;
                sun.style.display = 'inline';
                moon.style.display = 'none';
                knob.style.left = '3px';
            }
        }
        function getDarkModePref() {
            if (localStorage.getItem('theme') === 'dark') return true;
            if (localStorage.getItem('theme') === 'light') return false;
            return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        }
        let isDark = getDarkModePref();
        setDarkModeUI(isDark);
        toggler.addEventListener('change', function () {
            isDark = !isDark;
            setDarkModeUI(isDark);
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js" integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO" crossorigin="anonymous"></script>
    @RenderSection("Scripts", required: false)
</body>
</html>
