@page
@model BusTicketSystem.Pages.ForAdmin.TripManage.RouteMapModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = $"Chi tiết điểm dừng Chuyến đi ID: {Model.CurrentTrip?.TripId}";
}

<div class="header">
    <div class="left">
        <h1>@ViewData["Title"]</h1>
        <ul class="breadcrumb">
            <li><a asp-page="/ForAdmin/Dashboard/Index" style="text-decoration: none;">Tổng quan</a></li>/
            <li><a asp-page="/ForAdmin/TripManage/Index" style="text-decoration: none;">Chuyến đi</a></li>/
            <li><a href="/ForAdmin/TripManage/RouteMap" class="active" style="text-decoration: none;">Bản đồ Điểm dừng</a></li>
        </ul>
    </div>
    <div class="ms-auto">
        <a asp-page="./Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left-circle me-1"></i> Quay lại danh sách
        </a>
    </div>
</div>

<h3>
    Lộ trình chi tiết cho chuyến: @(Model.CurrentTrip?.Route?.Departure) <i class="bi bi-arrow-right-short"></i> @(Model.CurrentTrip?.Route?.Destination)
    (Khởi hành: @Model.CurrentTrip?.DepartureTime.ToString("dd/MM/yyyy HH:mm"))
</h3>
<div id="map" style="height: 600px; border-radius: 10px;" class="mb-4"></div>
@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const allPoints = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AllMapPoints));
            let initialCoords = [10.762622, 106.660172]; // Default view
            if (allPoints.length > 0) {
                initialCoords = [allPoints[0].latitude, allPoints[0].longitude];
            }

            const map = L.map('map').setView(initialCoords, allPoints.length > 0 ? 13 : 6);

            L.tileLayer('https://mt{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}&key=AIzaSyDcq-HEZDdXSiMsbD5o_T9GDS-iJGR9Ar0', {
                attribution: '&copy; Google',
                subdomains: ['0', '1', '2', '3']
            }).addTo(map);

            const latlngs = [];
            const markers = [];

            // Định nghĩa các icon khác nhau
            const originIcon = L.icon({
                iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x-green.png', // Ví dụ icon xanh lá
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [1, -34], shadowSize: [41, 41]
            });
            const destinationIcon = L.icon({
                iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x-red.png', // Ví dụ icon đỏ
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [1, -34], shadowSize: [41, 41]
            });
            const stopIcon = L.icon({
                iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x-blue.png', // Ví dụ icon xanh dương
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [1, -34], shadowSize: [41, 41]
            });
             const defaultIcon = L.icon({ // Icon mặc định nếu pointType không khớp
                iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
                iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
                shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
                iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [1, -34], shadowSize: [41, 41]
            });

            allPoints.forEach(point => {
                let currentIcon = defaultIcon;
                if (point.pointType === 'origin') currentIcon = originIcon;
                else if (point.pointType === 'destination') currentIcon = destinationIcon;
                else if (point.pointType === 'stop') currentIcon = stopIcon;

                let popupContent = `<strong>${point.stationName}</strong>`;
                if (point.pointType === 'stop') {
                    popupContent += ` (Thứ tự dừng: ${point.stopOrder})`; // Hiển thị thứ tự dừng thực tế
                    if (point.estimatedArrival) popupContent += `<br>Đến dự kiến: ${point.estimatedArrival.substring(0,5)}`;
                    if (point.estimatedDeparture) popupContent += `<br>Đi dự kiến: ${point.estimatedDeparture.substring(0,5)}`;
                    if (point.note) popupContent += `<br>Ghi chú: ${point.note}`;
                }

                const marker = L.marker([point.latitude, point.longitude], { icon: currentIcon }).addTo(map);
                marker.bindPopup(popupContent);
                markers.push(marker);

                latlngs.push([point.latitude, point.longitude]);
            });

            if (latlngs.length > 1) {
                L.polyline(latlngs, { color: 'purple', weight: 3, opacity: 0.7 }).addTo(map); // Màu đường nối khác
                map.fitBounds(L.polyline(latlngs).getBounds(), { padding: [50, 50] }); // Fit map to show all markers and polyline
            } else if (latlngs.length === 1) {
                map.setView(latlngs[0], 15); // Zoom in if only one point
            }
        });
    </script>
}